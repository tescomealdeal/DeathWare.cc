package me.zeroeightsix.kami.module.modules.exploit;

import com.mojang.realmsclient.gui.ChatFormatting;
import java.util.HashMap;
import java.util.List;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import me.zeroeightsix.kami.command.Command;
import me.zeroeightsix.kami.event.events.PacketEvent;
import me.zeroeightsix.kami.module.Module;
import me.zeroeightsix.kami.setting.Setting;
import me.zeroeightsix.kami.setting.Settings;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.play.server.SPacketEffect;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.Vec3d;

@Module.Info(name="CoordLogger", description="Coord Logger", category=Module.Category.EXPLOITS)
public class CoordLogger
        extends Module {
    private static final String fileName = "Hephaestus_CoordLogger.txt";
    private Setting<Boolean> tp = this.register(Settings.b("TpExploit", false));
    private Setting<Boolean> lightning = this.register(Settings.b("Thunder", false));
    private Setting<Boolean> portal = this.register(Settings.b("EndPortal", false));
    private Setting<Boolean> wither = this.register(Settings.b("Wither", false));
    private Setting<Boolean> dragon = this.register(Settings.b("Dragon", false));
    private Setting<Boolean> savetofile = this.register(Settings.b("SaveToFile", false));
    @EventHandler
    public Listener<PacketEvent.Send> listener = new Listener<PacketEvent.Send>(event -> {
        Object packet;
        if (this.lightning.getValue().booleanValue() && event.getPacket() instanceof SPacketSoundEffect && ((SPacketSoundEffect)(packet = (SPacketSoundEffect)((Object)event.getPacket()))).getCategory() == SoundCategory.WEATHER && ((SPacketSoundEffect)packet).getSound() == SoundEvents.ENTITY_LIGHTNING_THUNDER) {
            this.sendNotification("[CoordLogger]: " + ChatFormatting.RED.toString() + "Lightning spawned at X" + ((SPacketSoundEffect)packet).getX() + " Z" + ((SPacketSoundEffect)packet).getZ());
        }
        if (event.getPacket() instanceof SPacketEffect) {
            packet = (SPacketEffect)((Object)event.getPacket());
            if (this.portal.getValue().booleanValue() && ((SPacketEffect)packet).getSoundType() == 1038) {
                this.sendNotification("[CoordLogger]: " + ChatFormatting.RED.toString() + "End Portal activated at X" + ((SPacketEffect)packet).getSoundPos().getX() + " Y" + ((SPacketEffect)packet).getSoundPos().getY() + " Z" + ((SPacketEffect)packet).getSoundPos().getZ());
            }
            if (this.wither.getValue().booleanValue() && ((SPacketEffect)packet).getSoundType() == 1023) {
                this.sendNotification("[CoordLogger]: " + ChatFormatting.RED.toString() + "Wither spawned at X" + ((SPacketEffect)packet).getSoundPos().getX() + " Y" + ((SPacketEffect)packet).getSoundPos().getY() + " Z" + ((SPacketEffect)packet).getSoundPos().getZ());
            }
            if (this.dragon.getValue().booleanValue() && ((SPacketEffect)packet).getSoundType() == 1028) {
                this.sendNotification("[CoordLogger]: " + ChatFormatting.RED.toString() + "Dragon killed at X" + ((SPacketEffect)packet).getSoundPos().getX() + " Y" + ((SPacketEffect)packet).getSoundPos().getY() + " Z" + ((SPacketEffect)packet).getSoundPos().getZ());
            }
        }
    }, new Predicate[0]);
    private HashMap<Entity, Vec3d> knownPlayers = new HashMap();

    @Override
    public void onUpdate() {
        if (!this.tp.getValue().booleanValue()) {
            return;
        }
        if (CoordLogger.mc.player == null) {
            return;
        }
        List<Entity> tickEntityList = CoordLogger.mc.world.getLoadedEntityList();
        for (Entity entity : tickEntityList) {
            if (!(entity instanceof EntityPlayer) || entity.getName().equals(CoordLogger.mc.player.getName())) continue;
            Vec3d targetPos = new Vec3d(entity.posX, entity.posY, entity.posZ);
            if (this.knownPlayers.containsKey(entity)) {
                if (Math.abs(CoordLogger.mc.player.getPositionVector().distanceTo(targetPos)) >= 128.0 && this.knownPlayers.get(entity).distanceTo(targetPos) >= 64.0) {
                    this.sendNotification("[CoordLogger]: " + ChatFormatting.RED.toString() + "Player " + entity.getName() + " moved to Position " + targetPos.toString());
                }
                this.knownPlayers.put(entity, targetPos);
                continue;
            }
            this.knownPlayers.put(entity, targetPos);
        }
    }

    private void sendNotification(String s) {
        Command.sendChatMessage(s);
    }
}
